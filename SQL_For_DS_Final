Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000 by Primary Key
9080 by business_id Foreign Key
9581 by user_id Foreign Key

vi. Checkin = 493
vii. Photo = 10000 by Primary Key
6493 by business_id Foreign Key

viii. Tip = 3979 by business_id Foreign Key
537 by user_id Foreign Key
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	No
	
	SQL code used to arrive at answer:
	SELECT count(*) FROM User 
	WHERE name IS NULL 
	OR review_count IS NULL
	OR yelping_since IS NULL
	OR useful IS NULL
	OR funny IS NULL
	OR cool IS NULL
	OR fans IS NULL
	OR average_stars IS NULL
	OR compliment_hot IS NULL
	OR compliment_more IS NULL
	OR compliment_profile IS NULL
	OR compliment_cute IS NULL
	OR compliment_list IS NULL
	OR compliment_note IS NULL
	OR compliment_plain IS NULL
	OR compliment_cool IS NULL
	OR compliment_funny IS NULL
	OR compliment_writer IS NULL
	OR compliment_photos IS NULL
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT city, SUM(review_count) FROM business
	GROUP BY city
	ORDER BY SUM(review_count) DESC;
	
	Copy and Paste the Result Below:
+-----------------+-------------------+
| city            | SUM(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)


	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars as star_rating, sum(review_count) as count 
FROM business b
WHERE city = 'Avon'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+


ii. Beachwood

SQL code used to arrive at answer:
SELECT stars as star_rating, sum(review_count) as count 
FROM business b
WHERE city = 'Beachwood'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT name, review_count FROM user
ORDER BY review_count DESC
LIMIT 3;
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+		


8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

SELECT avg(fans)/avg(review_count) FROM user;

+-----------------------------+
| avg(fans)/avg(review_count) |
+-----------------------------+
|             0.0613016728739 |
+-----------------------------+

If you want an overtly simplified solution to a horribly broad question, fans and reviews do not correlate 1 to 1. In fact, the average number of fans is about 6% the average number of reviews.

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
1780 reviews with the word love
232 reviews with the word hate

	
	SQL code used to arrive at answer:
SELECT count(*) FROM review r
WHERE LOWER(r.text) LIKE '%love%'


SELECT count(*) FROM review r
WHERE LOWER(r.text) LIKE '%hate%'
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT name, fans FROM user
ORDER BY fans desc 
LIMIT 10;
	
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
SELECT fans, useful, funny FROM user
ORDER BY fans DESC;	

SELECT fans, useful, funny FROM user
ORDER BY fans DESC
LIMIT  10;

	Copy and Paste the Result Below:
+------+--------+--------+
| fans | useful |  funny |
+------+--------+--------+
|  503 |   3226 |   2554 |
|  497 |    257 |    138 |
|  311 | 122921 | 122419 |
|  253 |  17524 |   2324 |
|  173 |   4834 |   6646 |
|  159 |     48 |     13 |
|  133 |   1062 |    672 |
|  126 |   9363 |   9361 |
|  124 |   9851 |   7606 |
|  120 |    455 |    150 |
|  115 |   4008 |    570 |
|  111 |   1366 |    984 |
|  105 |    120 |    112 |
|  104 |   2995 |   1188 |
|  101 |    158 |    164 |
|  101 |   7850 |   5851 |
|   96 |   1180 |   1155 |
|   89 |   3177 |   2736 |
|   85 |    158 |     34 |
|   84 |   2161 |   2091 |
|   81 |    820 |    753 |
|   80 |   1091 |    774 |
|   78 |      9 |     18 |
|   76 |   1166 |    220 |
|   73 |     13 |     10 |
+------+--------+--------+
(Output limit exceeded, 25 of 10000 total rows shown)
	
	Please explain your findings and interpretation of the results:
	
There is no clear correlation between fans and useful/funny attributes. Useful/funny attributes vary largely between 10^1 and 10^4 while in the same range of fans. 	
I'm not sure what is being defined as statistically significant but if you define a strong relationship as having a larger useful or funny count than fan count, then 8/10 or 80% of the top 10 users with the most fans are considered useful and funny.	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
We are looking at Bars in Chandler.

i. Do the two groups you chose to analyze have a different distribution of hours?

They have a similar distribution, the business in the 2-3 star range has hours in the 9-2:30 range on Saturdays and the business in the 4-5 star range has hours in the 11-2:30 range on Saturdays.


ii. Do the two groups you chose to analyze have a different number of reviews?
The 2-3 star rating business has twice the amount of reviews than the 4-5 star business         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
There is nothing we can infer accurately because there are only two data points.

SQL code used for analysis:

SELECT b.city, b.stars, b.review_count, h.hours
FROM business b
JOIN category c ON b.id = c.business_id
LEFT JOIN hours h ON b.id = h.business_id
WHERE b.city = 'Chandler'
AND c.category = 'Bars'
GROUP BY b.city, b.stars;
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
Open businesses get atleast 40x more checkins than closed businesses.
         
ii. Difference 2:
There are almost 8x as many reviews for open businesses than closed businesses.         
         
         
SQL code used for analysis:
SELECT b.is_open, sum(ch.count), sum(b.review_count)
FROM business b 
LEFT JOIN checkin ch ON b.id = ch.business_id
GROUP BY b.is_open;
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
I'm going to examine the text in the tips table and look for basic key words. In this case, it's going to be 'good', 'bad', and 'ok'.  

         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

If you accept this version of what is considered a good, bad, or ok tip, then we can see that good tips come in overwhelmingly more than bad and ok tips. There are clear flaws in this search because the simple words are not good indicators of a fully encompassed review but for our purposes, this is fine. A more meaningful analysis of the text in tips would be to maybe analyze the most common words and create a word cloud because this analysis is very rudimentary.                           
                  
iii. Output of your finished dataset:
+------+
| Good |
+------+
|  758 |
+------+
 
+-----+
| Bad |
+-----+
|  93 |
+-----+

+-----+
|  ok |
+-----+
| 498 |
+-----+  

iv. Provide the SQL code you used to create your final dataset:
SELECT Count(*) as Good FROM tip t
WHERE t.text LIKE '%good%';

SELECT Count(*) as Bad FROM tip t
WHERE t.text LIKE '%bad%';

SELECT Count(*) as ok FROM tip t
WHERE t.text LIKE '%ok%';